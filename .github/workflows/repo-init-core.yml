name: Repo Config Bootstrap

on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:

jobs:
  configure-repos:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install PyGitHub
        run: pip install PyGithub

      - name: Run bootstrap script
        env:
          GH_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
          GH_ORG: walr-tech
        run: |
          python <<EOF
          import os
          from github import Github
          from datetime import datetime, timedelta, timezone

          token = os.environ["GH_TOKEN"]
          org_name = os.environ["GH_ORG"]

          g = Github(token)
          org = g.get_organization(org_name)

          now = datetime.now(timezone.utc)
          since = now - timedelta(minutes=10)

          for repo in org.get_repos():
              if repo.created_at < since:
                  continue

              print(f"📦 Bootstrapping: {repo.name}")

              # 1. Add "test" topic
              topics = repo.get_topics()
              if "test" not in topics:
                  topics.append("test")
                  repo.replace_topics(topics)

              # 2. Create CODEOWNERS
              codeowners_content = "* @your-org/platform-team\n"
              try:
                  repo.create_file(
                      path=".github/CODEOWNERS",
                      message="Add CODEOWNERS",
                      content=codeowners_content,
                      branch="main"
                  )
                  print("✅ CODEOWNERS added")
              except:
                  print("⚠️ CODEOWNERS already exists")

              # 3. Create README
              readme_content = f"# {repo.name}\n\nThis is a new Walr repository.\n"
              try:
                  repo.create_file(
                      path="README.md",
                      message="Add README",
                      content=readme_content,
                      branch="main"
                  )
                  print("✅ README added")
              except:
                  print("⚠️ README already exists")

              # 4. Create .gitignore
              gitignore = "bin/\nobj/\n.env\n.vscode/\n"
              try:
                  repo.create_file(
                      path=".gitignore",
                      message="Add .gitignore",
                      content=gitignore,
                      branch="main"
                  )
                  print("✅ .gitignore added")
              except:
                  print("⚠️ .gitignore already exists")

              # 5. Ensure default branch is 'main'
              try:
                  if repo.default_branch != "main":
                      repo.edit(default_branch="main")
                      print("🔁 Default branch set to main")
              except Exception as e:
                  print(f"❌ Could not set default branch: {e}")

              # (Optional) TODO: Set branch protection rules here
          EOF


