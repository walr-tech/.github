name: Repository init for core repos

on:
  schedule:
    - cron: '*/30 * * * *'  # every 30 mins
  workflow_dispatch:

jobs:
  codeowners-bootstrap:
    runs-on: ubuntu-latest
    outputs:
      modified_count: ${{ steps.set-output.outputs.count }}
      modified_repos: ${{ steps.set-output.outputs.repos }}
    steps:
      - name: Checkout .github repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install PyGithub
        run: pip install PyGithub

      - id: bootstrap
        name: Bootstrap CODEOWNERS in core-* repos
        env:
          GH_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
          GH_ORG: walr-tech
        run: |
          python <<EOF
          import os
          from github import Github
          from datetime import datetime, timedelta, timezone

          token = os.getenv("GH_TOKEN")
          org_name = os.getenv("GH_ORG")
          g = Github(token)
          org = g.get_organization(org_name)

          # Read CODEOWNERS template
          with open("templates/CODEOWNERS-core", "r") as f:
              codeowners_template = f.read()

          now = datetime.now(timezone.utc)
          since = now - timedelta(minutes=30)

          modified_repos = []

          for repo in org.get_repos():
              if not repo.name.startswith("core-"):
                  continue
              if repo.created_at < since:
                  continue

              print(f"➡️ Found new repo: {repo.name}")

              try:
                  repo.get_contents(".github/CODEOWNERS-core", ref=repo.default_branch)
                  print(f"⚠️  CODEOWNERS already exists in {repo.name}")
              except:
                  try:
                      repo.create_file(
                          path=".github/CODEOWNERS-core",
                          message="Add CODEOWNERS from template",
                          content=codeowners_template,
                          branch=repo.default_branch
                      )
                      print(f"✅ CODEOWNERS created in {repo.name}")
                      modified_repos.append(repo.name)
                  except Exception as e:
                      print(f"❌ Failed to add CODEOWNERS to {repo.name}: {e}")

          # Export modified repo list as output
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"count={len(modified_repos)}\n")
              f.write(f"repos={','.join(modified_repos)}\n")
          EOF

      - id: set-output
        name: Set summary output
        run: echo "count=${{ steps.bootstrap.outputs.count }}, repos=${{ steps.bootstrap.outputs.repos }}"


